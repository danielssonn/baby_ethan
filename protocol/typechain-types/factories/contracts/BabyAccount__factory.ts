/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  BabyAccount,
  BabyAccountInterface,
} from "../../contracts/BabyAccount";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMyContribution",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003960201b60201c565b61004160201b60201c565b60018081905550610105565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610872806101146000396000f3fe6080604052600436106100705760003560e01c806381c35cbd1161004e57806381c35cbd146100d35780638da5cb5b146100fe578063d0e30db014610129578063f2fde38b1461013357610070565b806312065fe0146100755780632e1a7d4d146100a0578063715018a6146100bc575b600080fd5b34801561008157600080fd5b5061008a61015c565b604051610097919061050e565b60405180910390f35b6100ba60048036038101906100b5919061055a565b61016c565b005b3480156100c857600080fd5b506100d1610213565b005b3480156100df57600080fd5b506100e8610227565b6040516100f5919061050e565b60405180910390f35b34801561010a57600080fd5b5061011361026e565b60405161012091906105c8565b60405180910390f35b610131610297565b005b34801561013f57600080fd5b5061015a6004803603810190610155919061060f565b610327565b005b60006101666103ab565b47905090565b600260015414156101b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a990610699565b60405180910390fd5b60026001819055506101c26103ab565b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610208573d6000803e3d6000fd5b506001808190555050565b61021b6103ab565b6102256000610429565b565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102e291906106e8565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b61032f6103ab565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561039f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610396906107b0565b60405180910390fd5b6103a881610429565b50565b6103b36104ed565b73ffffffffffffffffffffffffffffffffffffffff166103d161026e565b73ffffffffffffffffffffffffffffffffffffffff1614610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041e9061081c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b610508816104f5565b82525050565b600060208201905061052360008301846104ff565b92915050565b600080fd5b610537816104f5565b811461054257600080fd5b50565b6000813590506105548161052e565b92915050565b6000602082840312156105705761056f610529565b5b600061057e84828501610545565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105b282610587565b9050919050565b6105c2816105a7565b82525050565b60006020820190506105dd60008301846105b9565b92915050565b6105ec816105a7565b81146105f757600080fd5b50565b600081359050610609816105e3565b92915050565b60006020828403121561062557610624610529565b5b6000610633848285016105fa565b91505092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610683601f8361063c565b915061068e8261064d565b602082019050919050565b600060208201905081810360008301526106b281610676565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106f3826104f5565b91506106fe836104f5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610733576107326106b9565b5b828201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061079a60268361063c565b91506107a58261073e565b604082019050919050565b600060208201905081810360008301526107c98161078d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061080660208361063c565b9150610811826107d0565b602082019050919050565b60006020820190508181036000830152610835816107f9565b905091905056fea2646970667358221220bfaa0ca5cc048a69a5fd56eb545a34d7276b6d231a21e7149a52e0e48cc24a3a64736f6c63430008090033";

type BabyAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BabyAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BabyAccount__factory extends ContractFactory {
  constructor(...args: BabyAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BabyAccount> {
    return super.deploy(overrides || {}) as Promise<BabyAccount>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BabyAccount {
    return super.attach(address) as BabyAccount;
  }
  override connect(signer: Signer): BabyAccount__factory {
    return super.connect(signer) as BabyAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BabyAccountInterface {
    return new utils.Interface(_abi) as BabyAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BabyAccount {
    return new Contract(address, _abi, signerOrProvider) as BabyAccount;
  }
}
